{
  "nbformat": 4,
  "nbformat_minor": 5,
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.6.13"
    },
    "colab": {
      "name": "Shaurya Final NLP.ipynb",
      "provenance": []
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nuFMJX2vsm71",
        "outputId": "b107105d-a763-4b6b-a9bf-3f4e42066a50"
      },
      "source": [
        "import nltk\n",
        "nltk.download('averaged_perceptron_tagger')"
      ],
      "id": "nuFMJX2vsm71",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[nltk_data] Downloading package averaged_perceptron_tagger to\n",
            "[nltk_data]     /root/nltk_data...\n",
            "[nltk_data]   Package averaged_perceptron_tagger is already up-to-\n",
            "[nltk_data]       date!\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "True"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 14
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "U15jm0HZsrlb",
        "outputId": "0999ff40-a3de-4262-9a1e-e74734f9af35"
      },
      "source": [
        "import nltk\n",
        "nltk.download('maxent_ne_chunker')"
      ],
      "id": "U15jm0HZsrlb",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[nltk_data] Downloading package maxent_ne_chunker to\n",
            "[nltk_data]     /root/nltk_data...\n",
            "[nltk_data]   Package maxent_ne_chunker is already up-to-date!\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "True"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GanQPYcvsxVS",
        "outputId": "d3f9d0d2-747e-46dc-b003-a582fc364e8a"
      },
      "source": [
        "import nltk\n",
        "nltk.download('words')"
      ],
      "id": "GanQPYcvsxVS",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[nltk_data] Downloading package words to /root/nltk_data...\n",
            "[nltk_data]   Package words is already up-to-date!\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "True"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 16
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "015975c7"
      },
      "source": [
        "#Importing necessary modules.\n",
        "import nltk\n",
        "from nltk.tag import StanfordNERTagger\n",
        "from nltk.metrics.scores import accuracy\n",
        "import nltk\n",
        "from nltk.tag import StanfordNERTagger\n",
        "from nltk.tokenize import word_tokenize\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "from matplotlib import style\n",
        "import os"
      ],
      "id": "015975c7",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "4bf260e3"
      },
      "source": [
        "raw_annotations = open(\"Shaurya.txt\",encoding=\"UTF-8\").read()\n",
        "split_annotations = raw_annotations.split()\n",
        "\n",
        "#Amending class annotations to reflect Stanford's NER Tagger.\n",
        "for n,i in enumerate(split_annotations):\n",
        "    if i == \"I-PER\":\n",
        "        split_annotations[n] = \"PERSON\"\n",
        "    if i == \"I-ORG\":\n",
        "        split_annotations[n] = \"ORGANIZATION\"\n",
        "    if i == \"I-LOC\":\n",
        "        split_annotations[n] = \"LOCATION\""
      ],
      "id": "4bf260e3",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7a261b28"
      },
      "source": [
        "#Grouping NE data into tuples.\n",
        "def group(lst, n):\n",
        "    for i in range(0, len(lst), n):\n",
        "        val = lst[i:i+n]\n",
        "        if len(val) == n:\n",
        "            yield tuple(val)\n",
        "\n",
        "reference_annotations = list(group(split_annotations, 2))"
      ],
      "id": "7a261b28",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "75cf1498"
      },
      "source": [
        "pure_tokens = split_annotations[::2]\n",
        "tagged_words = nltk.pos_tag(pure_tokens)\n",
        "nltk_unformatted_prediction = nltk.ne_chunk(tagged_words)"
      ],
      "id": "75cf1498",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "f5841680"
      },
      "source": [
        "#Converting prediction to multiline string and then to list (including POS tags).\n",
        "multiline_string = nltk.chunk.tree2conllstr(nltk_unformatted_prediction)\n",
        "listed_pos_and_ne = multiline_string.split()"
      ],
      "id": "f5841680",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "67aac41f"
      },
      "source": [
        "#Deleting POS tags and renaming.\n",
        "del listed_pos_and_ne[1::3]\n",
        "listed_ne = listed_pos_and_ne"
      ],
      "id": "67aac41f",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "1abee60c"
      },
      "source": [
        "#Amending class annotations for consistency with 'reference_annotations'.\n",
        "for n,i in enumerate(listed_ne):\n",
        "    if i == \"B-PERSON\":\n",
        "        listed_ne[n] = \"PERSON\"\n",
        "    if i == \"I-PERSON\":\n",
        "        listed_ne[n] = \"PERSON\"\n",
        "    if i == \"B-ORGANIZATION\":\n",
        "        listed_ne[n] = \"ORGANIZATION\"\n",
        "    if i == \"I-ORGANIZATION\":\n",
        "        listed_ne[n] = \"ORGANIZATION\"\n",
        "    if i == \"B-LOCATION\":\n",
        "        listed_ne[n] = \"LOCATION\"\n",
        "    if i == \"I-LOCATION\":\n",
        "        listed_ne[n] = \"LOCATION\"\n",
        "    if i == \"B-GPE\":\n",
        "        listed_ne[n] = \"LOCATION\"\n",
        "    if i == \"I-GPE\":\n",
        "        listed_ne[n] = \"LOCATION\""
      ],
      "id": "1abee60c",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DVBv2e9StAA-",
        "outputId": "d0b733ff-b0c9-4e19-cb42-526aff8568e0"
      },
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ],
      "id": "DVBv2e9StAA-",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Mounted at /content/drive\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8348dbb2",
        "outputId": "d8da6453-e4cc-4fc9-b56d-b8b4bc1c34a6"
      },
      "source": [
        "#Calculating Standford NER Tagger Accuracy.\n",
        "st = StanfordNERTagger('/content/drive/MyDrive/NER Tagger/english.all.3class.distsim.crf.ser', '/content/drive/MyDrive/NER Tagger/stanford-ner.jar', encoding='utf-8')\n",
        "stanford_prediction = st.tag(pure_tokens)\n",
        "stanford_accuracy = accuracy(reference_annotations, stanford_prediction)\n",
        "print(stanford_accuracy)"
      ],
      "id": "8348dbb2",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/nltk/tag/stanford.py:183: DeprecationWarning: \n",
            "The StanfordTokenizer will be deprecated in version 3.2.5.\n",
            "Please use \u001b[91mnltk.tag.corenlp.CoreNLPPOSTagger\u001b[0m or \u001b[91mnltk.tag.corenlp.CoreNLPNERTagger\u001b[0m instead.\n",
            "  super(StanfordNERTagger, self).__init__(*args, **kwargs)\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "0.782608695652174\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "15ac0dbb"
      },
      "source": [
        ""
      ],
      "id": "15ac0dbb",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "4daf5d14"
      },
      "source": [
        "Raw_annotations = open(\"Shaurya.txt\",encoding=\"UTF-8\").read()\n",
        "Split_annotations = raw_annotations.split()\n",
        "\n",
        "#Amending class annotations to reflect Stanford's NER Tagger.\n",
        "for n,i in enumerate(split_annotations):\n",
        "    if i == \"I-PER\":\n",
        "        split_annotations[n] = \"PERSON\"\n",
        "    if i == \"I-ORG\":\n",
        "        split_annotations[n] = \"ORGANIZATION\"\n",
        "    if i == \"I-LOC\":\n",
        "        split_annotations[n] = \"LOCATION\"\n",
        "    if i == \"I-O\":\n",
        "        split_annotations[n] = \"OTHER\""
      ],
      "id": "4daf5d14",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "319fa974"
      },
      "source": [
        "#Grouping NE data into tuples.\n",
        "def Group(lst, n):\n",
        "    for i in range(0, len(lst), n):\n",
        "        val = lst[i:i+n]\n",
        "        if len(val) == n:\n",
        "            yield tuple(val)\n",
        "Reference_annotations = list(group(Split_annotations, 2))\n",
        "Pure_tokens = Split_annotations[::2]\n",
        "Tagged_words = nltk.pos_tag(Pure_tokens)\n",
        "Nltk_unformatted_prediction = nltk.ne_chunk(Tagged_words)"
      ],
      "id": "319fa974",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "773a2b70"
      },
      "source": [
        "#Converting prediction to multiline string and then to list (including POS tags).\n",
        "Multiline_string = nltk.chunk.tree2conllstr(Nltk_unformatted_prediction)\n",
        "Listed_pos_and_ne = Multiline_string.split()"
      ],
      "id": "773a2b70",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "36f50b34"
      },
      "source": [
        "#Deleting POS tags and renaming.\n",
        "del Listed_pos_and_ne[1::3]\n",
        "Listed_ne = Listed_pos_and_ne"
      ],
      "id": "36f50b34",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "5412f780"
      },
      "source": [
        "#Amending class annotations for consistency with 'reference_annotations'.\n",
        "for n,i in enumerate(listed_ne):\n",
        "    if i == \"B-PERSON\":\n",
        "        Listed_ne[n] = \"PERSON\"\n",
        "    if i == \"I-PERSON\":\n",
        "        Listed_ne[n] = \"PERSON\"\n",
        "    if i == \"B-ORGANIZATION\":\n",
        "        Listed_ne[n] = \"ORGANIZATION\"\n",
        "    if i == \"I-ORGANIZATION\":\n",
        "        Listed_ne[n] = \"ORGANIZATION\"\n",
        "    if i == \"B-LOCATION\":\n",
        "        Listed_ne[n] = \"LOCATION\"\n",
        "    if i == \"I-LOCATION\":\n",
        "        Listed_ne[n] = \"LOCATION\"\n",
        "    if i == \"B-GPE\":\n",
        "        Listed_ne[n] = \"LOCATION\"\n",
        "    if i == \"I-GPE\":\n",
        "        Listed_ne[n] = \"LOCATION\"\n",
        "    if i == \"I-O\":\n",
        "        Listed_ne[n] = \"OTHER\""
      ],
      "id": "5412f780",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ce89a2a0",
        "outputId": "8ecce248-0c14-46a2-f862-b08cf55712e1"
      },
      "source": [
        "#Calculating Standford NER Tagger Accuracy.\n",
        "st = StanfordNERTagger('/content/drive/MyDrive/NER Tagger/english.all.3class.distsim.crf.ser', '/content/drive/MyDrive/NER Tagger/stanford-ner.jar', encoding='utf-8')\n",
        "Stanford_prediction = st.tag(Pure_tokens)\n",
        "Stanford_accuracy = accuracy(Reference_annotations, Stanford_prediction)\n",
        "print(Stanford_accuracy)"
      ],
      "id": "ce89a2a0",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/nltk/tag/stanford.py:183: DeprecationWarning: \n",
            "The StanfordTokenizer will be deprecated in version 3.2.5.\n",
            "Please use \u001b[91mnltk.tag.corenlp.CoreNLPPOSTagger\u001b[0m or \u001b[91mnltk.tag.corenlp.CoreNLPNERTagger\u001b[0m instead.\n",
            "  super(StanfordNERTagger, self).__init__(*args, **kwargs)\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "0.6521739130434783\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "46992f05"
      },
      "source": [
        ""
      ],
      "id": "46992f05",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 311
        },
        "id": "8782ffb1",
        "outputId": "7894dce3-fe3e-419d-c198-e772bb820496"
      },
      "source": [
        "style.use('fivethirtyeight')\n",
        "N = 1\n",
        "\n",
        "#The x locations for the groups.\n",
        "ind = np.arange(N) \n",
        "\n",
        "#The width of the bars.\n",
        "width = 0.30 \n",
        "fig, ax = plt.subplots()\n",
        "\n",
        "stanford_percentage = stanford_accuracy * 100\n",
        "rects1 = ax.bar(ind, stanford_percentage, width, color='#000000')\n",
        "Stanford_percentage = Stanford_accuracy * 100\n",
        "rects2 = ax.bar(ind+width, Stanford_percentage, width, color='#e1ff00')\n",
        "\n",
        "#Adding some text for labels, title and axes ticks.\n",
        "ax.set_xlabel('Classifier')\n",
        "ax.set_ylabel('Accuracy (by percentage)')\n",
        "ax.set_title('Accuracy by NER Classifier')\n",
        "ax.set_xticks(ind+width)\n",
        "ax.set_xticklabels( ('') )\n",
        "\n",
        "ax.legend( (rects1[0], rects2[0]), ('Stanford-CLASS-3', 'Stanford-CLASS-4'), bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0. )\n",
        "\n",
        "#Creating a function 'autolabel'.\n",
        "def autolabel(rects):\n",
        "#Attaching some text labels.\n",
        "    for rect in rects:\n",
        "        height = rect.get_height()\n",
        "        ax.text(rect.get_x()+rect.get_width()/2., 1*height, '%10.2f' % float(height), ha='center', va='bottom')\n",
        "\n",
        "autolabel(rects1)\n",
        "autolabel(rects2)\n",
        "\n",
        "#Returning the plot.\n",
        "plt.show()"
      ],
      "id": "8782ffb1",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    }
  ]
}