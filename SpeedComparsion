{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "NLP_Worksheet10",
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "b32lg6xyjRnn"
      },
      "source": [
        "#Shaurya Gulati\n",
        "##18BCS6092"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "I3ZVwytxT3Yw",
        "outputId": "980e1d45-4448-401a-a035-9595b81f1ea7"
      },
      "source": [
        "import nltk\n",
        "nltk.download('punkt')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[nltk_data] Downloading package punkt to /root/nltk_data...\n",
            "[nltk_data]   Unzipping tokenizers/punkt.zip.\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "True"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vrd7PpyaT8rc",
        "outputId": "2a1e6d5a-a637-42ef-e0fe-40bdb663a1de"
      },
      "source": [
        "import nltk\n",
        "nltk.download('averaged_perceptron_tagger')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[nltk_data] Downloading package averaged_perceptron_tagger to\n",
            "[nltk_data]     /root/nltk_data...\n",
            "[nltk_data]   Unzipping taggers/averaged_perceptron_tagger.zip.\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "True"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wmg-_cdlUGYS",
        "outputId": "a882babd-bec2-42f7-e1a0-f97450f3d504"
      },
      "source": [
        "import nltk\n",
        "nltk.download('maxent_ne_chunker')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[nltk_data] Downloading package maxent_ne_chunker to\n",
            "[nltk_data]     /root/nltk_data...\n",
            "[nltk_data]   Unzipping chunkers/maxent_ne_chunker.zip.\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "True"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vAu9qNmhUOwk",
        "outputId": "c8f5744e-33a8-4d12-fe56-c7842b658f4d"
      },
      "source": [
        "import nltk\n",
        "nltk.download('words')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[nltk_data] Downloading package words to /root/nltk_data...\n",
            "[nltk_data]   Unzipping corpora/words.zip.\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "True"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "R6qVDy0JQNRs"
      },
      "source": [
        "import nltk\n",
        "import os\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "from matplotlib import style\n",
        "from nltk import pos_tag\n",
        "from nltk.tag import StanfordNERTagger\n",
        "from nltk.tokenize import word_tokenize\n",
        "\n",
        "\n",
        "\n",
        "style.use('fivethirtyeight')\n",
        "\n",
        "\n",
        "\n",
        "# Process text \n",
        "def process_text(txt_file):\n",
        " raw_text = open('/content/news_article.txt').read()\n",
        " token_text = word_tokenize(raw_text)\n",
        " return token_text\n",
        "\n",
        "\n",
        "# Stanford NER tagger \n",
        "def stanford_tagger(token_text):\n",
        " st = StanfordNERTagger('/content/drive/MyDrive/NER Tagger/english.all.3class.distsim.crf.ser',\n",
        " '/content/drive/MyDrive/NER Tagger/stanford-ner.jar',\n",
        " encoding='utf-8') \n",
        " ne_tagged = st.tag(token_text)\n",
        " return(ne_tagged)\n",
        "\n",
        " \n",
        "\n",
        "# NLTK POS and NER taggers \n",
        "def nltk_tagger(token_text):\n",
        " tagged_words = nltk.pos_tag(token_text)\n",
        " ne_tagged = nltk.ne_chunk(tagged_words)\n",
        " return(ne_tagged)\n",
        "\n",
        "# function\n",
        "def stanford_main():\n",
        " print(stanford_tagger(process_text('/content/news_article.txt')))\n",
        "\n",
        "def nltk_main():\n",
        " print(nltk_tagger(process_text('/content/news_article.txt')))\n",
        "\n",
        "\n",
        "#Plot\n",
        "\n",
        "def time_plot(stanford_total_time, nltk_total_time):\n",
        " N = 1\n",
        " ind = np.arange(N) # the x locations for the groups\n",
        " width = 0.35 # the width of the bars\n",
        " stanford_total_time = stanford_total_time\n",
        " nltk_total_time = nltk_total_time \n",
        " fig, ax = plt.subplots() \n",
        " rects1 = ax.bar(ind, stanford_total_time, width, color='black') \n",
        " rects2 = ax.bar(ind+width, nltk_total_time, width, color='y')\n",
        "\n",
        "\n",
        " # Add text for labels, title and axes ticks\n",
        " ax.set_xlabel('Classifier')\n",
        " ax.set_ylabel('Time (in seconds)')\n",
        " ax.set_title('Speed by NER Classifier')\n",
        " ax.set_xticks(ind+width)\n",
        " ax.set_xticklabels( ('') ) \n",
        " ax.legend( (rects1[0], rects2[0]), ('Stanford', 'NLTK'), bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0. )\n",
        " def autolabel(rects):\n",
        "\n",
        " # attach some text labels\n",
        "\n",
        "  for rect in rects:\n",
        "    height = rect.get_height()\n",
        "    ax.text(rect.get_x()+rect.get_width()/2., 1.02*height, '%10.2f' % float(height),\n",
        "    ha='center', va='bottom')\n",
        "    autolabel(rects1)\n",
        "    autolabel(rects2) \n",
        "\n",
        " plt.show()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "uSbzQ5sVT5Ne",
        "outputId": "9e322d14-37f5-4f57-8906-4ba118c1e318"
      },
      "source": [
        "#Graph Results\n",
        "\n",
        "if __name__ == '__main__':\n",
        " stanford_t0 = os.times()[4]\n",
        " stanford_main()\n",
        " stanford_t1 = os.times()[4]\n",
        " stanford_total_time = stanford_t1 - stanford_t0\n",
        " nltk_t0 = os.times()[4]\n",
        " nltk_main()\n",
        " nltk_t1 = os.times()[4]\n",
        " nltk_total_time = nltk_t1 - nltk_t0\n",
        " time_plot(stanford_total_time, nltk_total_time)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/nltk/tag/stanford.py:183: DeprecationWarning: \n",
            "The StanfordTokenizer will be deprecated in version 3.2.5.\n",
            "Please use \u001b[91mnltk.tag.corenlp.CoreNLPPOSTagger\u001b[0m or \u001b[91mnltk.tag.corenlp.CoreNLPNERTagger\u001b[0m instead.\n",
            "  super(StanfordNERTagger, self).__init__(*args, **kwargs)\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "[('House', 'ORGANIZATION'), ('Speaker', 'O'), ('John', 'PERSON'), ('Boehner', 'PERSON'), ('became', 'O'), ('animated', 'O'), ('Tuesday', 'O'), ('over', 'O'), ('the', 'O'), ('proposed', 'O'), ('Keystone', 'ORGANIZATION'), ('Pipeline', 'ORGANIZATION'), (',', 'O'), ('castigating', 'O'), ('the', 'O'), ('Obama', 'PERSON'), ('administration', 'O'), ('for', 'O'), ('not', 'O'), ('having', 'O'), ('approved', 'O'), ('the', 'O'), ('project', 'O'), ('yet', 'O'), ('.', 'O'), ('Republican', 'ORGANIZATION'), ('House', 'ORGANIZATION'), ('Speaker', 'O'), ('John', 'PERSON'), ('Boehner', 'PERSON'), ('says', 'O'), ('there', 'O'), (\"'s\", 'O'), ('``', 'O'), ('nothing', 'O'), ('complex', 'O'), ('about', 'O'), ('the', 'O'), ('Keystone', 'O'), ('Pipeline', 'O'), (',', 'O'), (\"''\", 'O'), ('and', 'O'), ('that', 'O'), ('it', 'O'), (\"'s\", 'O'), ('time', 'O'), ('to', 'O'), ('build', 'O'), ('it', 'O'), ('.', 'O'), ('``', 'O'), ('Complex', 'O'), ('?', 'O'), ('You', 'O'), ('think', 'O'), ('the', 'O'), ('Keystone', 'ORGANIZATION'), ('Pipeline', 'ORGANIZATION'), ('is', 'O'), ('complex', 'O'), ('?', 'O'), ('!', 'O'), (\"''\", 'O'), ('Boehner', 'PERSON'), ('responded', 'O'), ('to', 'O'), ('a', 'O'), ('questioner', 'O'), ('.', 'O'), ('``', 'O'), ('It', 'O'), (\"'s\", 'O'), ('been', 'O'), ('under', 'O'), ('study', 'O'), ('for', 'O'), ('five', 'O'), ('years', 'O'), ('!', 'O'), ('We', 'O'), ('build', 'O'), ('pipelines', 'O'), ('in', 'O'), ('America', 'LOCATION'), ('every', 'O'), ('day', 'O'), ('.', 'O'), ('Do', 'O'), ('you', 'O'), ('realize', 'O'), ('there', 'O'), ('are', 'O'), ('200,000', 'O'), ('miles', 'O'), ('of', 'O'), ('pipelines', 'O'), ('in', 'O'), ('the', 'O'), ('United', 'LOCATION'), ('States', 'LOCATION'), ('?', 'O'), (\"''\", 'O'), ('The', 'O'), ('speaker', 'O'), ('went', 'O'), ('on', 'O'), (':', 'O'), ('``', 'O'), ('And', 'O'), ('the', 'O'), ('only', 'O'), ('reason', 'O'), ('the', 'O'), ('president', 'O'), (\"'s\", 'O'), ('involved', 'O'), ('in', 'O'), ('the', 'O'), ('Keystone', 'ORGANIZATION'), ('Pipeline', 'ORGANIZATION'), ('is', 'O'), ('because', 'O'), ('it', 'O'), ('crosses', 'O'), ('an', 'O'), ('international', 'O'), ('boundary', 'O'), ('.', 'O'), ('Listen', 'O'), (',', 'O'), ('we', 'O'), ('can', 'O'), ('build', 'O'), ('it', 'O'), ('.', 'O'), ('There', 'O'), (\"'s\", 'O'), ('nothing', 'O'), ('complex', 'O'), ('about', 'O'), ('the', 'O'), ('Keystone', 'O'), ('Pipeline', 'O'), ('--', 'O'), ('it', 'O'), (\"'s\", 'O'), ('time', 'O'), ('to', 'O'), ('build', 'O'), ('it', 'O'), ('.', 'O'), (\"''\", 'O'), ('Boehner', 'PERSON'), ('said', 'O'), ('the', 'O'), ('president', 'O'), ('had', 'O'), ('no', 'O'), ('excuse', 'O'), ('at', 'O'), ('this', 'O'), ('point', 'O'), ('to', 'O'), ('not', 'O'), ('give', 'O'), ('the', 'O'), ('pipeline', 'O'), ('the', 'O'), ('go-ahead', 'O'), ('after', 'O'), ('the', 'O'), ('State', 'ORGANIZATION'), ('Department', 'ORGANIZATION'), ('released', 'O'), ('a', 'O'), ('report', 'O'), ('on', 'O'), ('Friday', 'O'), ('indicating', 'O'), ('the', 'O'), ('project', 'O'), ('would', 'O'), ('have', 'O'), ('a', 'O'), ('minimal', 'O'), ('impact', 'O'), ('on', 'O'), ('the', 'O'), ('environment', 'O'), ('.', 'O'), ('Republicans', 'O'), ('have', 'O'), ('long', 'O'), ('pushed', 'O'), ('for', 'O'), ('construction', 'O'), ('of', 'O'), ('the', 'O'), ('project', 'O'), (',', 'O'), ('which', 'O'), ('enjoys', 'O'), ('some', 'O'), ('measure', 'O'), ('of', 'O'), ('Democratic', 'O'), ('support', 'O'), ('as', 'O'), ('well', 'O'), ('.', 'O'), ('The', 'O'), ('GOP', 'ORGANIZATION'), ('is', 'O'), ('considering', 'O'), ('conditioning', 'O'), ('an', 'O'), ('extension', 'O'), ('of', 'O'), ('the', 'O'), ('debt', 'O'), ('limit', 'O'), ('on', 'O'), ('approval', 'O'), ('of', 'O'), ('the', 'O'), ('project', 'O'), ('by', 'O'), ('Obama', 'PERSON'), ('.', 'O'), ('The', 'O'), ('White', 'ORGANIZATION'), ('House', 'ORGANIZATION'), (',', 'O'), ('though', 'O'), (',', 'O'), ('has', 'O'), ('said', 'O'), ('that', 'O'), ('it', 'O'), ('has', 'O'), ('no', 'O'), ('timetable', 'O'), ('for', 'O'), ('a', 'O'), ('final', 'O'), ('decision', 'O'), ('on', 'O'), ('the', 'O'), ('project', 'O'), ('.', 'O')]\n",
            "(S\n",
            "  (ORGANIZATION House/NNP)\n",
            "  Speaker/NNP\n",
            "  (PERSON John/NNP Boehner/NNP)\n",
            "  became/VBD\n",
            "  animated/JJ\n",
            "  Tuesday/NNP\n",
            "  over/IN\n",
            "  the/DT\n",
            "  proposed/VBN\n",
            "  (PERSON Keystone/NNP Pipeline/NNP)\n",
            "  ,/,\n",
            "  castigating/VBG\n",
            "  the/DT\n",
            "  (ORGANIZATION Obama/NNP)\n",
            "  administration/NN\n",
            "  for/IN\n",
            "  not/RB\n",
            "  having/VBG\n",
            "  approved/VBN\n",
            "  the/DT\n",
            "  project/NN\n",
            "  yet/RB\n",
            "  ./.\n",
            "  (ORGANIZATION Republican/JJ)\n",
            "  (ORGANIZATION House/NNP)\n",
            "  Speaker/NNP\n",
            "  (PERSON John/NNP Boehner/NNP)\n",
            "  says/VBZ\n",
            "  there/EX\n",
            "  's/VBZ\n",
            "  ``/``\n",
            "  nothing/NN\n",
            "  complex/JJ\n",
            "  about/IN\n",
            "  the/DT\n",
            "  (ORGANIZATION Keystone/NNP Pipeline/NNP)\n",
            "  ,/,\n",
            "  ''/''\n",
            "  and/CC\n",
            "  that/IN\n",
            "  it/PRP\n",
            "  's/VBZ\n",
            "  time/NN\n",
            "  to/TO\n",
            "  build/VB\n",
            "  it/PRP\n",
            "  ./.\n",
            "  ``/``\n",
            "  Complex/NNP\n",
            "  ?/.\n",
            "  You/PRP\n",
            "  think/VBP\n",
            "  the/DT\n",
            "  (ORGANIZATION Keystone/NNP Pipeline/NNP)\n",
            "  is/VBZ\n",
            "  complex/JJ\n",
            "  ?/.\n",
            "  !/.\n",
            "  ''/''\n",
            "  (PERSON Boehner/NNP)\n",
            "  responded/VBD\n",
            "  to/TO\n",
            "  a/DT\n",
            "  questioner/NN\n",
            "  ./.\n",
            "  ``/``\n",
            "  It/PRP\n",
            "  's/VBZ\n",
            "  been/VBN\n",
            "  under/IN\n",
            "  study/NN\n",
            "  for/IN\n",
            "  five/CD\n",
            "  years/NNS\n",
            "  !/.\n",
            "  We/PRP\n",
            "  build/VBP\n",
            "  pipelines/NNS\n",
            "  in/IN\n",
            "  (GPE America/NNP)\n",
            "  every/DT\n",
            "  day/NN\n",
            "  ./.\n",
            "  Do/VB\n",
            "  you/PRP\n",
            "  realize/VB\n",
            "  there/EX\n",
            "  are/VBP\n",
            "  200,000/CD\n",
            "  miles/NNS\n",
            "  of/IN\n",
            "  pipelines/NNS\n",
            "  in/IN\n",
            "  the/DT\n",
            "  (GPE United/NNP States/NNPS)\n",
            "  ?/.\n",
            "  ''/''\n",
            "  The/DT\n",
            "  speaker/NN\n",
            "  went/VBD\n",
            "  on/IN\n",
            "  :/:\n",
            "  ``/``\n",
            "  And/CC\n",
            "  the/DT\n",
            "  only/JJ\n",
            "  reason/NN\n",
            "  the/DT\n",
            "  president/NN\n",
            "  's/POS\n",
            "  involved/VBN\n",
            "  in/IN\n",
            "  the/DT\n",
            "  (ORGANIZATION Keystone/NNP Pipeline/NNP)\n",
            "  is/VBZ\n",
            "  because/IN\n",
            "  it/PRP\n",
            "  crosses/VBZ\n",
            "  an/DT\n",
            "  international/JJ\n",
            "  boundary/NN\n",
            "  ./.\n",
            "  (PERSON Listen/NNP)\n",
            "  ,/,\n",
            "  we/PRP\n",
            "  can/MD\n",
            "  build/VB\n",
            "  it/PRP\n",
            "  ./.\n",
            "  There/EX\n",
            "  's/VBZ\n",
            "  nothing/NN\n",
            "  complex/JJ\n",
            "  about/IN\n",
            "  the/DT\n",
            "  (ORGANIZATION Keystone/NNP)\n",
            "  Pipeline/NNP\n",
            "  --/:\n",
            "  it/PRP\n",
            "  's/VBZ\n",
            "  time/NN\n",
            "  to/TO\n",
            "  build/VB\n",
            "  it/PRP\n",
            "  ./.\n",
            "  ''/''\n",
            "  (PERSON Boehner/NNP)\n",
            "  said/VBD\n",
            "  the/DT\n",
            "  president/NN\n",
            "  had/VBD\n",
            "  no/DT\n",
            "  excuse/NN\n",
            "  at/IN\n",
            "  this/DT\n",
            "  point/NN\n",
            "  to/TO\n",
            "  not/RB\n",
            "  give/VB\n",
            "  the/DT\n",
            "  pipeline/NN\n",
            "  the/DT\n",
            "  go-ahead/NN\n",
            "  after/IN\n",
            "  the/DT\n",
            "  (ORGANIZATION State/NNP Department/NNP)\n",
            "  released/VBD\n",
            "  a/DT\n",
            "  report/NN\n",
            "  on/IN\n",
            "  Friday/NNP\n",
            "  indicating/VBG\n",
            "  the/DT\n",
            "  project/NN\n",
            "  would/MD\n",
            "  have/VB\n",
            "  a/DT\n",
            "  minimal/JJ\n",
            "  impact/NN\n",
            "  on/IN\n",
            "  the/DT\n",
            "  environment/NN\n",
            "  ./.\n",
            "  Republicans/NNPS\n",
            "  have/VBP\n",
            "  long/RB\n",
            "  pushed/VBN\n",
            "  for/IN\n",
            "  construction/NN\n",
            "  of/IN\n",
            "  the/DT\n",
            "  project/NN\n",
            "  ,/,\n",
            "  which/WDT\n",
            "  enjoys/VBZ\n",
            "  some/DT\n",
            "  measure/NN\n",
            "  of/IN\n",
            "  (ORGANIZATION Democratic/JJ)\n",
            "  support/NN\n",
            "  as/RB\n",
            "  well/RB\n",
            "  ./.\n",
            "  The/DT\n",
            "  (ORGANIZATION GOP/NNP)\n",
            "  is/VBZ\n",
            "  considering/VBG\n",
            "  conditioning/VBG\n",
            "  an/DT\n",
            "  extension/NN\n",
            "  of/IN\n",
            "  the/DT\n",
            "  debt/NN\n",
            "  limit/NN\n",
            "  on/IN\n",
            "  approval/NN\n",
            "  of/IN\n",
            "  the/DT\n",
            "  project/NN\n",
            "  by/IN\n",
            "  (PERSON Obama/NNP)\n",
            "  ./.\n",
            "  The/DT\n",
            "  (FACILITY White/NNP House/NNP)\n",
            "  ,/,\n",
            "  though/RB\n",
            "  ,/,\n",
            "  has/VBZ\n",
            "  said/VBD\n",
            "  that/IN\n",
            "  it/PRP\n",
            "  has/VBZ\n",
            "  no/DT\n",
            "  timetable/NN\n",
            "  for/IN\n",
            "  a/DT\n",
            "  final/JJ\n",
            "  decision/NN\n",
            "  on/IN\n",
            "  the/DT\n",
            "  project/NN\n",
            "  ./.)\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    }
  ]
}