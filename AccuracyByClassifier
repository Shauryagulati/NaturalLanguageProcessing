{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.8.5"
    },
    "colab": {
      "name": "NLP_Worksheet9",
      "provenance": []
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ulkAQ_-IEYoW",
        "outputId": "942b00e5-2c1e-49c3-bea6-3bd1031f642c"
      },
      "source": [
        "import nltk\n",
        "nltk.download('averaged_perceptron_tagger')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[nltk_data] Downloading package averaged_perceptron_tagger to\n",
            "[nltk_data]     /root/nltk_data...\n",
            "[nltk_data]   Package averaged_perceptron_tagger is already up-to-\n",
            "[nltk_data]       date!\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "True"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 16
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "5ECCV07tEEzS"
      },
      "source": [
        "import nltk\n",
        "from nltk.tag import StanfordNERTagger\n",
        "from nltk.metrics.scores import accuracy\n",
        "\n",
        "raw_annotations = open(\"wikigold.conll.txt\",encoding=\"UTF-8\").read()\n",
        "split_annotations = raw_annotations.split()\n",
        "\n",
        "# Amend class annotations to reflect Stanford's NERTagger\n",
        "for n,i in enumerate(split_annotations):\n",
        "    if i == \"I-PER\":\n",
        "        split_annotations[n] = \"PERSON\"\n",
        "    if i == \"I-ORG\":\n",
        "        split_annotations[n] = \"ORGANIZATION\"\n",
        "    if i == \"I-LOC\":\n",
        "        split_annotations[n] = \"LOCATION\"\n",
        "\n",
        "# Group NE data into tuples\n",
        "def group(lst, n):\n",
        "    for i in range(0, len(lst), n):\n",
        "        val = lst[i:i+n]\n",
        "        if len(val) == n:\n",
        "            yield tuple(val)\n",
        "\n",
        "reference_annotations = list(group(split_annotations, 2))"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "UGI3RupfEEzU"
      },
      "source": [
        "pure_tokens = split_annotations[::2]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "N7VK-tOJEgRp",
        "outputId": "b186b8b9-54b9-4f8c-e6ea-cea3060b127f"
      },
      "source": [
        "import nltk\n",
        "nltk.download('maxent_ne_chunker')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[nltk_data] Downloading package maxent_ne_chunker to\n",
            "[nltk_data]     /root/nltk_data...\n",
            "[nltk_data]   Package maxent_ne_chunker is already up-to-date!\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "True"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 19
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "47YFCO75EmcK",
        "outputId": "cde9c7bc-2c8d-4b43-d16e-4c18ab73200a"
      },
      "source": [
        "import nltk\n",
        "nltk.download('words')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[nltk_data] Downloading package words to /root/nltk_data...\n",
            "[nltk_data]   Package words is already up-to-date!\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "True"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 20
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "DfdCDILGEEzV"
      },
      "source": [
        "tagged_words = nltk.pos_tag(pure_tokens)\n",
        "nltk_unformatted_prediction = nltk.ne_chunk(tagged_words)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "voIR-SF_EEzV"
      },
      "source": [
        "#Convert prediction to multiline string and then to list (includes pos tags)\n",
        "\n",
        "multiline_string = nltk.chunk.tree2conllstr(nltk_unformatted_prediction)\n",
        "listed_pos_and_ne = multiline_string.split()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "SG4U1iEJEEzW"
      },
      "source": [
        "# Delete pos tags and rename\n",
        "\n",
        "del listed_pos_and_ne[1::3]\n",
        "listed_ne = listed_pos_and_ne"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "1iAOt_U_EEzW"
      },
      "source": [
        "# Amend class annotations for consistency with reference_annotations\n",
        "\n",
        "for n,i in enumerate(listed_ne):\n",
        "    if i == \"B-PERSON\":\n",
        "        listed_ne[n] = \"PERSON\"\n",
        "    if i == \"I-PERSON\":\n",
        "        listed_ne[n] = \"PERSON\"\n",
        "    if i == \"B-ORGANIZATION\":\n",
        "        listed_ne[n] = \"ORGANIZATION\"\n",
        "    if i == \"I-ORGANIZATION\":\n",
        "        listed_ne[n] = \"ORGANIZATION\"\n",
        "    if i == \"B-LOCATION\":\n",
        "        listed_ne[n] = \"LOCATION\"\n",
        "    if i == \"I-LOCATION\":\n",
        "        listed_ne[n] = \"LOCATION\"\n",
        "    if i == \"B-GPE\":\n",
        "        listed_ne[n] = \"LOCATION\"\n",
        "    if i == \"I-GPE\":\n",
        "        listed_ne[n] = \"LOCATION\""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0H0UVDqOEEzX"
      },
      "source": [
        "# Group prediction into tuples\n",
        "\n",
        "nltk_formatted_prediction = list(group(listed_ne, 2))"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "RS8VMuG9EEzX",
        "outputId": "f284d625-bea1-4d27-cd19-d8736b03e929"
      },
      "source": [
        "#calculating the NLTK NERTagger accuracy\n",
        "\n",
        "nltk_accuracy = accuracy(reference_annotations, nltk_formatted_prediction)\n",
        "print(nltk_accuracy)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "0.8977574581119738\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XeJD00QlKfzV",
        "outputId": "647ad143-7366-4ea0-e355-850ff329ac04"
      },
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Mounted at /content/drive\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BV7M5_hlKsPj",
        "outputId": "c4e5f201-ce33-4115-85d3-b00abaaa0989"
      },
      "source": [
        "#calculating Standford NERTagger Accuracy\n",
        "#Importing necessary modules.\n",
        "import nltk\n",
        "from nltk.tag import StanfordNERTagger\n",
        "from nltk.tokenize import word_tokenize\n",
        "\n",
        "import os\n",
        "java_path=(\"C:\\\\Program Files\\\\Java\\\\jre1.8.0_271\\\\bin\\\\java.exe\")\n",
        "os.environ['JAVAHOME'] = java_path\n",
        "\n",
        "st = StanfordNERTagger('/content/english.all.3class.distsim.crf.ser', '/content/stanford-ner.jar', encoding='utf-8')\n",
        "stanford_prediction = st.tag(pure_tokens)\n",
        "stanford_accuracy = accuracy(reference_annotations, stanford_prediction)\n",
        "print(stanford_accuracy)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/nltk/tag/stanford.py:183: DeprecationWarning: \n",
            "The StanfordTokenizer will be deprecated in version 3.2.5.\n",
            "Please use \u001b[91mnltk.tag.corenlp.CoreNLPPOSTagger\u001b[0m or \u001b[91mnltk.tag.corenlp.CoreNLPNERTagger\u001b[0m instead.\n",
            "  super(StanfordNERTagger, self).__init__(*args, **kwargs)\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "0.9222261953412342\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 311
        },
        "id": "30iIuwlYEEzY",
        "outputId": "52d49f7c-a846-405e-92e9-c9c5f557a379"
      },
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "from matplotlib import style\n",
        "\n",
        "style.use('fivethirtyeight')\n",
        "\n",
        "N = 1\n",
        "ind = np.arange(N) # the x locations for the groups\n",
        "width = 0.35 # the width of the bars\n",
        "\n",
        "fig, ax = plt.subplots()\n",
        "\n",
        "stanford_percentage = stanford_accuracy * 100\n",
        "rects1 = ax.bar(ind, stanford_percentage, width)\n",
        "\n",
        "nltk_percentage = nltk_accuracy * 100\n",
        "rects2 = ax.bar(ind+width, nltk_percentage, width)\n",
        "\n",
        "# add some text for labels, title and axes ticks\n",
        "\n",
        "ax.set_xlabel('Classifier')\n",
        "ax.set_ylabel('Accuracy (by percentage)')\n",
        "ax.set_title('Accuracy by NER Classifier')\n",
        "ax.set_xticks(ind+width)\n",
        "ax.set_xticklabels( ('') )\n",
        "\n",
        "ax.legend( (rects1[0], rects2[0]), ('Stanford', 'NLTK'), bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0. )\n",
        "\n",
        "def autolabel(rects):\n",
        "\n",
        "# attach some text labels\n",
        "\n",
        "    for rect in rects:\n",
        "        height = rect.get_height()\n",
        "        ax.text(rect.get_x()+rect.get_width()/2., 1*height, '%10.2f' % float(height), ha='center', va='bottom')\n",
        "\n",
        "autolabel(rects1)\n",
        "autolabel(rects2)\n",
        "\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    }
  ]
}